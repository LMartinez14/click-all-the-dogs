{"version":3,"sources":["components/dogCards/dogCards.js","components/header/header.js","components/wrapper/wrapper.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","className","onClick","clickCounter","id","alt","name","src","image","Header","children","score","streak","Wrapper","App","state","cards","gameEnd","_this","setState","console","log","this","forEach","card","count","alert","find","o","i","sort","Math","random","_this2","wrapper_wrapper","header_header","map","dogCards_dogCards","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"o7GAceA,SAVF,SAAAC,GAAK,OAEfC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOC,QAAS,kBAAML,EAAMM,aAAaN,EAAMO,MAC3DN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACZH,EAAAC,EAAAC,cAAA,OAAKK,IAAKR,EAAMS,KAAMC,IAAKV,EAAMW,YCI3BC,SATA,SAAAZ,GAAK,OAClBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAASJ,EAAMa,UAC9BZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAf,UACUJ,EAAMc,MADhB,YACgCd,EAAMe,WCC3BC,SALC,SAAAhB,GAAK,OACrBC,EAAAC,EAAAC,cAAA,OAAKC,UAAY,WAChBJ,EAAMa,mBC2EQI,oNAtEbC,MAAQ,CACNC,QACAL,MAAO,EACPC,OAAQ,KAIVK,QAAU,WAaR,OAZIC,EAAKH,MAAMJ,MAAQO,EAAKH,MAAMH,QAChCM,EAAKC,SAAS,CAAEP,OAAQM,EAAKH,MAAMJ,OAAS,WAE1CS,QAAQC,IAAIC,KAAKP,MAAMH,UAG3BM,EAAKH,MAAMC,MAAMO,QAAQ,SAAAC,GACvBA,EAAKC,MAAQ,IAEfC,MAAM,uBAAyBR,EAAKH,MAAMJ,MAAQ,YAElDO,EAAKC,SAAS,CAAER,MAAO,KAChB,KAKTR,aAAe,SAAAC,GAIbc,EAAKH,MAAMC,MAAMW,KAAK,SAACC,EAAGC,GACxB,GAAID,EAAExB,KAAOA,EAAI,CACf,GAAuB,IAAnBY,EAAMa,GAAGJ,MASX,OAPAT,EAAMa,GAAGJ,MAAQT,EAAMa,GAAGJ,MAAQ,EAClCP,EAAKC,SAAS,CAAER,MAAOO,EAAKH,MAAMJ,MAAQ,GAAK,WAC7CS,QAAQC,IAAIC,KAAKP,MAAMJ,SAIzBO,EAAKH,MAAMC,MAAMc,KAAK,kBAAMC,KAAKC,SAAW,MACrC,EAGPd,EAAKD,sFASJ,IAAAgB,EAAAX,KACP,OAGExB,EAAAC,EAAAC,cAACkC,EAAD,KACEpC,EAAAC,EAAAC,cAACmC,EAAD,CAAQxB,MAAOW,KAAKP,MAAMJ,MAAOC,OAAQU,KAAKP,MAAMH,QAApD,wBACCU,KAAKP,MAAMC,MAAMoB,IAAI,SAAAZ,GAAI,OACxB1B,EAAAC,EAAAC,cAAEqC,EAAF,CACElC,aAAc8B,EAAK9B,aACnBC,GAAIoB,EAAKpB,GACTkC,IAAKd,EAAKpB,GACVI,MAAOgB,EAAKhB,kBAhEN+B,cCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OAAOhD,EAAAC,EAAAC,cAAC+C,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.01ad2c6c.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./dogCards.css\";\n\n// create the cards for the dogs.json array\nconst Card = props => (\n   \n   <div className=\"card\" onClick={() => props.clickCounter(props.id)}>\n      <div className=\"dogImage\">\n         <img alt={props.name} src={props.image} />\n      </div>\n   </div>\n\n);\n\nexport default Card;","import React from \"react\";\nimport \"./header.css\";\n\nconst Header = props => (\n  <div className=\"header\">\n    <div className=\"title\">{props.children}</div>\n    <div className=\"scores\">\n      Score: {props.score} Streak: {props.streak}\n    </div>\n  </div>\n);\n\nexport default Header;","import React from \"react\";\nimport \"./wrapper.css\";\n\nconst Wrapper = props =>\n<div className = \"wrapper\">\n{props.children}\n</div>;\n\nexport default Wrapper","import React, { Component } from 'react';\n// from react: import logo from './logo.svg';\nimport Card from \"./components/dogCards\";\nimport Header from \"./components/header\";\nimport Wrapper from \"./components/wrapper\";\nimport cards from \"./dogs.json\";\nimport \"./App.css\";\n\n// from react app\nclass App extends Component {\n  state = {\n    cards,\n    score: 0,\n    streak: 0\n  };\n\n  // end the game when \n  gameEnd = () => {\n    if (this.state.score > this.state.streak) {\n      this.setState({ streak: this.state.score }, function () {\n        // console.log(\"Your highschore is \" + {this.state.streak});\n        console.log(this.state.streak);\n      });\n    }\n    this.state.cards.forEach(card => {\n      card.count = 0;\n    });\n    alert(\"YAASSS! You adopted \" + this.state.score + \" doggos!\");\n    // default zero\n    this.setState({ score: 0 });\n    return true;\n  }\n\n  // track if card has been clicked or not\n  // increment by +1 or reset game\n  clickCounter = id => {\n    // \"o\" = object\n    // via https://www.ecma-international.org/ecma-262/6.0/#sec-array.prototype.find\n    // Array.prototype.find ( predicate [ , thisArg ] )\n    this.state.cards.find((o, i) => {\n      if (o.id === id) {\n        if (cards[i].count === 0) {\n          // add 1 if not clicked\n          cards[i].count = cards[i].count + 1;\n          this.setState({ score: this.state.score + 1 }, function () {\n            console.log(this.state.score);\n          });\n          // shuffle the array to yield random result\n          // because I don't know how to array\n          this.state.cards.sort(() => Math.random() - 0.5)\n          return true;\n        }\n        else {\n          this.gameEnd();\n        }\n      }\n    });\n  }\n\n  // map the cards and render the components for the dog.json card objects\n  // from react\n\n  render() {\n    return (\n      // create the wrapper xml\n      // can't comment within the xml code\n      <Wrapper>\n        <Header score={this.state.score} streak={this.state.streak}>Click All The Dogs!!</Header>\n        {this.state.cards.map(card => (\n          < Card\n            clickCounter={this.clickCounter}\n            id={card.id}\n            key={card.id}\n            image={card.image} />\n        ))}\n      </Wrapper>\n    );\n  }\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// react imports\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.js';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}